{"version":3,"sources":["webpack://@thoughtspot/visual-embed-sdk/./docs/src/components/Docmap/index.tsx"],"names":["props","useState","toc","setToc","useEffect","doc","document","createElement","innerHTML","docContent","tocEl","querySelector","hash","location","toggleActiveClass","documentElement","scrollTop","offsetTop","INTRO_WRAPPER_MARGIN_TOP","href","querySelectorAll","forEach","tag","index","temp","getAttribute","classList","add","contains","remove","className","style","zIndex","options","length","dangerouslySetInnerHTML","__html"],"mappings":"iLA+DA,UA3De,SAACA,GAIV,OACoBC,cAAS,IAAxBC,EADL,KACUC,EADV,MAGFC,gBAAU,WAIN,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAYR,EAAMS,WACtB,IAAIC,EAAQL,EAAIM,cAAc,QAC9B,GAAID,EAAO,KACCE,EAASZ,EAAMa,SAAfD,KACJA,IACAF,EAAQI,EAAkBJ,EAAOE,GAEjCN,SAASS,gBAAgBC,UACpBV,SAASK,cAAT,GAA0BC,GACtBK,UAAYC,MAEzBf,EAAOO,EAAMF,gBAEbL,EAAO,MAEZ,CAACH,EAAMS,WAAYT,EAAMa,SAASD,OAErC,IAAME,EAAoB,SAACZ,EAAciB,GAYrC,OAXAjB,EAAIkB,iBAAiB,KAAKC,SAAQ,SAACC,EAAKC,GACpC,IAAMC,EAAOF,EACTA,EAAIG,aAAa,UAAYN,EAC7BK,EAAKE,UAAUC,IAAI,aAEfL,EAAII,UAAUE,SAAS,cACvBJ,EAAKE,UAAUG,OAAO,aAG9B3B,EAAIkB,iBAAiB,KAAKG,GAAOf,UAAYgB,EAAKhB,aAE/CN,GAGX,MACY,KAARA,GACI,uBACI4B,UAAU,cACVC,MAAO,CACHC,OAAQhC,EAAMiC,QAAQC,OAAS,GAAK,EAAI,IAG5C,qBAAGJ,UAAU,YAAb,gBACA,uBAAKK,wBAAyB,CAAEC,OAAQlC","file":"628-25046bda1b4c54e6d20b.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './index.scss';\r\nimport { INTRO_WRAPPER_MARGIN_TOP } from '../../constants/uiConstants';\r\n\r\nconst Docmap = (props: {\r\n    docContent: string;\r\n    options: Object[];\r\n    location: Location;\r\n}) => {\r\n    const [toc, setToc] = useState('');\r\n\r\n    useEffect(() => {\r\n        // GraphQL doesn't provide any seperate html for Table of Content. It is included in the document itself.\r\n        // To extract the TOC from document, we first create a temporary element to set the document as it's innerHTML.\r\n        // Them we search for TOC using querySelector on the temporary element and then set the obtained TOC to display in the UI.\r\n        const doc = document.createElement('div');\r\n        doc.innerHTML = props.docContent;\r\n        let tocEl = doc.querySelector('#toc');\r\n        if (tocEl) {\r\n            const { hash } = props.location;\r\n            if (hash) {\r\n                tocEl = toggleActiveClass(tocEl, hash);\r\n                /* To position the element when anchor tag is clicked on right nav */\r\n                document.documentElement.scrollTop =\r\n                    (document.querySelector(`${hash}`) as HTMLElement)\r\n                        .offsetTop - INTRO_WRAPPER_MARGIN_TOP;\r\n            }\r\n            setToc(tocEl.innerHTML);\r\n        } else {\r\n            setToc('');\r\n        }\r\n    }, [props.docContent, props.location.hash]);\r\n\r\n    const toggleActiveClass = (toc: Element, href: string) => {\r\n        toc.querySelectorAll('a').forEach((tag, index) => {\r\n            const temp = tag;\r\n            if (tag.getAttribute('href') === href) {\r\n                temp.classList.add('activeTag');\r\n            } else {\r\n                if (tag.classList.contains('activeTag')) {\r\n                    temp.classList.remove('activeTag');\r\n                }\r\n            }\r\n            toc.querySelectorAll('a')[index].innerHTML = temp.innerHTML;\r\n        });\r\n        return toc;\r\n    };\r\n\r\n    return (\r\n        toc !== '' && (\r\n            <div\r\n                className=\"docmapLinks\"\r\n                style={{\r\n                    zIndex: props.options.length > 0 ? -1 : 0,\r\n                }}\r\n            >\r\n                <p className=\"tocTitle\">On this page</p>\r\n                <div dangerouslySetInnerHTML={{ __html: toc }} />\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default Docmap;\r\n"],"sourceRoot":""}