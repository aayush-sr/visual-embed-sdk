{"version":3,"sources":["webpack://@thoughtspot/visual-embed-sdk/./docs/src/components/Search/index.tsx","webpack://@thoughtspot/visual-embed-sdk/./docs/src/constants/keystrokeConstants.ts"],"names":["props","node","useRef","optionListRef","useState","showSearchResult","updateShowSearchResult","highlightedIndex","setHighlightedIndex","useEffect","options","length","handleClick","event","current","contains","target","document","addEventListener","removeEventListener","scrollIntoView","className","type","placeholder","onFocus","onKeyDown","e","value","optionSize","key","preventDefault","prev","optionSelected","redirectURL","onChange","ref","map","option","index","pageid","onClick","el","title"],"mappings":"8MAsHA,EAtGsC,SAACA,GACnC,IAAMC,GAAOC,cACPC,GAAgBD,YAAO,IAFgB,GAGME,eAAS,GAArDC,EAHsC,KAGpBC,EAHoB,QAIGF,cAAS,GAAlDG,EAJsC,KAIpBC,EAJoB,MAM7CC,gBAAU,WACFT,EAAMU,QAAQC,OAAS,GACvBL,GAAuB,KAE5B,CAACN,EAAMU,UAGV,IAAME,EAAc,SAACC,GACbZ,EAAKa,SAAWb,EAAKa,QAAQC,SAASF,EAAMG,SAGhDV,GAAuB,KAG3BG,gBAAU,WAEN,OADAQ,SAASC,iBAAiB,YAAaN,GAChC,WACHK,SAASE,oBAAoB,YAAaP,MAE/C,CAACX,IAmCJ,OAJIE,WAAeW,QAAQP,KACvBJ,WAAeW,QAAQP,GAAkBa,kBAIzC,uBAAKC,UAAU,iBACX,uBAAKA,UAAU,sBACX,yBACIC,KAAK,SACLC,YAAY,uBACZC,QAvCA,kBAAMlB,GAAuB,IAwC7BmB,UAtCE,SAACC,GACf,GAAK1B,EAAM2B,OAAkC,IAAzB3B,EAAMU,QAAQC,OAAlC,CAEA,IAAMiB,EAAa5B,EAAMU,QAAQC,OAEjC,OAAQe,EAAEG,KACN,ICnDY,UDwDR,OAJAH,EAAEI,sBACFtB,GACI,SAACuB,GAAD,OAAmBA,EAAO,EAAIH,GAAcA,KAGpD,ICxDc,YD2DV,OAFAF,EAAEI,sBACFtB,GAAoB,SAACuB,GAAD,OAAmBA,EAAO,GAAKH,KAEvD,IC3DS,QDgEL,OAJA5B,EAAMgC,eACFhC,EAAMU,QAAQH,GAAkB0B,kBAEpCzB,EAAoB,GAExB,QACI,UAgBImB,MAAO3B,EAAM2B,MACbO,SAAUlC,EAAMkC,WAEnB7B,GACG,uBAAK8B,IAAKlC,EAAMoB,UAAU,mBACrBrB,EAAMU,QAAQ0B,KACX,SAACC,EAA2BC,GAA5B,OACI,uBACIT,IAAKQ,EAAOE,OACZlB,UAAU,SACVmB,QAAS,kBACLxC,EAAMgC,eAAeK,EAAOJ,cAEhCE,IAAK,SAACM,GACFtC,EAAcW,QAAQwB,GAASG,IAGnC,uBACIpB,UAAS,wDACXiB,IAAU/B,GAAoB,WAE5B,qBAAGc,UAAU,SAASrB,EAAM2B,OAC5B,qBAAGN,UAAU,UAAUgB,EAAOK","file":"263-d1d7324239e8e2d03d4d.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './index.scss';\nimport { SearchQueryResult } from '../../interfaces/index';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n} from '../../constants/keystrokeConstants';\n\ntype SearchProps = {\n    options: SearchQueryResult[];\n    value: string;\n    optionSelected: (pageid: string) => void;\n    onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n};\n\nconst Search: React.FC<SearchProps> = (props) => {\n    const node = useRef();\n    const optionListRef = useRef({});\n    const [showSearchResult, updateShowSearchResult] = useState(false);\n    const [highlightedIndex, setHighlightedIndex] = useState(0);\n\n    useEffect(() => {\n        if (props.options.length > 0) {\n            updateShowSearchResult(true);\n        }\n    }, [props.options]);\n\n    // This handles the mouse click events for suggestion list\n    const handleClick = (event: Event) => {\n        if (node.current && node.current.contains(event.target)) {\n            return;\n        }\n        updateShowSearchResult(false);\n    };\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClick);\n        return () => {\n            document.removeEventListener('mousedown', handleClick);\n        };\n    }, [node]);\n\n    const onFocus = () => updateShowSearchResult(true);\n\n    const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (!props.value || props.options.length === 0) return;\n\n        const optionSize = props.options.length;\n\n        switch (e.key) {\n            case ARROW_UP:\n                e.preventDefault();\n                setHighlightedIndex(\n                    (prev: number) => (prev - 1 + optionSize) % optionSize,\n                );\n                return;\n            case ARROW_DOWN:\n                e.preventDefault();\n                setHighlightedIndex((prev: number) => (prev + 1) % optionSize);\n                return;\n            case ENTER:\n                props.optionSelected(\n                    props.options[highlightedIndex].redirectURL,\n                );\n                setHighlightedIndex(0);\n                return;\n            default:\n                return;\n        }\n    };\n\n    if (optionListRef?.current[highlightedIndex]) {\n        optionListRef?.current[highlightedIndex].scrollIntoView();\n    }\n\n    return (\n        <div className=\"searchWrapper\">\n            <div className=\"searchInputWrapper\">\n                <input\n                    type=\"Search\"\n                    placeholder=\"Search Documentation\"\n                    onFocus={onFocus}\n                    onKeyDown={onKeyDown}\n                    value={props.value}\n                    onChange={props.onChange}\n                />\n                {showSearchResult && (\n                    <div ref={node} className=\"resultContainer\">\n                        {props.options.map(\n                            (option: SearchQueryResult, index: number) => (\n                                <div\n                                    key={option.pageid}\n                                    className=\"result\"\n                                    onClick={() =>\n                                        props.optionSelected(option.redirectURL)\n                                    }\n                                    ref={(el: HTMLDivElement) => {\n                                        optionListRef.current[index] = el;\n                                    }}\n                                >\n                                    <div\n                                        className={`textContainer \n                                    ${index === highlightedIndex && 'active'}`}\n                                    >\n                                        <p className=\"title\">{props.value}</p>\n                                        <p className=\"footer\">{option.title}</p>\n                                    </div>\n                                </div>\n                            ),\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Search;\n","export const ARROW_UP = 'ArrowUp';\nexport const ARROW_DOWN = 'ArrowDown';\nexport const ENTER = 'Enter';\n"],"sourceRoot":""}